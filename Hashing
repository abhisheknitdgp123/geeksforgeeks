2 Sum problem

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

*************************************************************


1. Using Hashing / Hash map technique

#include <iostream>
 
#include <fstream>
#include <string>
#include<unordered_map>

using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

         // base case

        int size = nums.size();
        if (size < 2) return nums;
       
        unordered_map<int, int> seen;
        seen.reserve(nums.size());  // the sample1 size is reserved for the bucket to contain a minimum of nums.size() elements.

        for (int i = 0; i < nums.size(); i++) {
            seen[nums[i]] = i;
        }
        for (int i = 0; i < nums.size(); i++) {
            int difference = target - nums[i];
            auto it = seen.find(difference);
            if (it != seen.end())
                return vector<int>{it->second + 1, it};
            seen.insert(make_pair(nums[i], i));
        }
        return vector<int>{};
    }
};

int main()
{
    
                    
    vector<int> V = { 2,7,11,15 };

    Solution sum;
    int n = 9;

    vector<int> result = sum.twoSum(V, n);

    for (int i = 0;i < result.size();i++) {
        cout << result[i];
        cout << endl;
    }
    return 0;
}
 
