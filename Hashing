2 Sum problem

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

*************************************************************


1. Using Hashing / Hash map technique

#include <iostream>
#include <string>
#include<unordered_map>
using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> numMap;
        for (int i = 0; i < nums.size(); i++) {
            numMap[nums[i]] = i;
        }
        for (int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i];
            if (numMap.count(complement) && numMap[complement] != i) {
                return { i, numMap[complement] };
            }
        }
        return {};
    }
};

int main()
{
    
    vector<int> V = { 2,7,11,15 };
    Solution sum;
    int n = 9;
    vector<int> result = sum.twoSum(V, n);
    for (int i = 0;i < result.size();i++) {
        cout << result[i];
        cout << endl;
    }
    return 0;
}
